/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/*&mt {
    bindings =
        <&mo>,
        <&kp>;
};*/

/ {
    macros {
        split_V: split_V {
            compatible = "zmk,behavior-macro";
            label = "SPLIT_V";
            #binding-cells = <0>;
            bindings = <&kp LC(B) &kp V>;
        };
        split_h: split_h {
            compatible = "zmk,behavior-macro";
            label = "SPLIT_H";
            #binding-cells = <0>;
            bindings = <&kp LC(B) &kp S>;
        };
        vim_write: vim_write {
            compatible = "zmk,behavior-macro";
            label = "VIM_WRITE";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp W>;
        };
        vim_quit: vim_quit {
            compatible = "zmk,behavior-macro";
            label = "VIM_QUIT";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp Q>;
        };
        detatch: detatch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(B) &kp D>;
            label = "DETATCH";
        };
    };

    behaviors {
        a_tab: a_tab {
            compatible = "zmk,behavior-tap-dance";
            label = "A_TAB";
            #binding-cells = <0>;
            bindings = <&kp A>, <&kp TAB>;
        };
        quote: quote {
            compatible = "zmk,behavior-tap-dance";
            label = "QUOTE";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp DOUBLE_QUOTES>, <&kp GRAVE>;
        };
        bracketL: bracketL {
            compatible = "zmk,behavior-tap-dance";
            label = "BRACKETL";
            #binding-cells = <0>;
            bindings =
                <&kp LEFT_PARENTHESIS>,
                <&kp LEFT_BRACKET>,
                <&kp LEFT_BRACE>;
        };
        bracketR: bracketR {
            compatible = "zmk,behavior-tap-dance";
            label = "BRACKETR";
            #binding-cells = <0>;
            bindings =
                <&kp RIGHT_PARENTHESIS>,
                <&kp RIGHT_BRACKET>,
                <&kp RIGHT_BRACE>;
        };
        w: w {
            compatible = "zmk,behavior-tap-dance";
            label = "W";
            #binding-cells = <0>;
            bindings = <&kp W>, <&vim_write>;
        };
        q: q {
            compatible = "zmk,behavior-tap-dance";
            label = "Q";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&vim_quit>;
        };
        space_enter: space_enter {
            compatible = "zmk,behavior-tap-dance";
            label = "SPACE_ENTER";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&kp ENTER>;
        };
    };

    combos {
        compatible = "zmk,combos";

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <16 19>;
        };

        under_ {
            bindings = <&kp UNDERSCORE>;
            key-positions = <31 28>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <4 7>;
        };

        space {
            bindings = <&kp SPACE>;
            key-positions = <38 39>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none  &kp Q  &kp W  &kp E                       &kp R  &kp T    &kp Y      &kp U  &kp I                  &kp O       &kp P                    &none
&none  &kp A  &kp S  &kp D                       &kp F  &kp G    &kp H      &kp J  &kp K                  &kp L       &kp SEMI                 &none
&none  &kp Z  &kp X  &kp C                       &kp V  &kp B    &kp N      &kp M  &kp COMMA              &kp PERIOD  &mt RIGHT_COMMAND SLASH  &none
                     &mt LEFT_CONTROL BACKSPACE  &mo 1  &mo 3    &kp SPACE  &mo 2  &mt LEFT_SHIFT ESCAPE
            >;

            label = "alph";
        };

        num_dir {
            bindings = <
&none  &split_h  &kp LA(LEFT_ARROW)  &kp UP_ARROW      &kp LA(RIGHT_ARROW)  &kp PAGE_UP       &kp PLUS   &kp N1  &kp N2          &kp N3  &kp ASTERISK  &none
&none  &split_V  &kp LEFT_ARROW      &kp DOWN          &kp RIGHT            &kp PAGE_DOWN     &kp MINUS  &kp N4  &kp N5          &kp N6  &kp SLASH     &none
&none  &detatch  &kp HOME            &kp LG(TAB)       &kp END              &space_enter      &kp DOT    &kp N7  &kp N8          &kp N9  &kp N0        &none
                                     &kp LEFT_COMMAND  &none                &kp LEFT_SHIFT    &kp RET    &mo 3   &kp LEFT_SHIFT
            >;

            label = "arr+num";
        };

        char {
            bindings = <
&none  &none  &none  &kp AMPERSAND  &kp EXCLAMATION  &kp PRCNT     &kp GRAVE          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BSLH        &none  &none
&none  &none  &none  &kp PIPE       &kp TILDE        &kp HASH      &kp APOS           &kp LBKT              &kp RBKT               &kp UNDERSCORE  &none  &none
&none  &none  &none  &kp CARET      &kp AT_SIGN      &kp DOLLAR    &kp DOUBLE_QUOTES  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp FSLH        &none  &none
                     &kp LGUI       &none            &kp SPACE     &kp RET            &none                 &kp RALT
            >;

            label = "char";
        };

        short_Cuts {
            bindings = <
&none  &kp LC(LG(F))  &kp LG(LS(N))       &kp F12     &kp LG(LS(R))  &kp C_VOLUME_UP      &kp C_REWIND        &kp C_BRI_INC  &kp BACKSPACE  &kp DEL  &none  &none
&none  &kp LC(LG(A))  &kp LC(LEFT_ARROW)  &kp ESCAPE  &kp LC(RIGHT)  &kp K_MUTE           &kp C_PLAY_PAUSE    &kp ENTER      &none          &none    &none  &none
&none  &kp LC(LG(Q))  &kp LG(X)           &kp LG(C)   &kp LG(V)      &kp C_VOLUME_DOWN    &kp C_FAST_FORWARD  &kp C_BRI_DEC  &none          &none    &none  &none
                                          &none       &kp LEFT_ALT   &none                &none               &none          &none
            >;

            label = "macro";
        };
    };
};
